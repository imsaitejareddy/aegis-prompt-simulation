"""
analysis.py
===========

This script analyses the synthetic results produced by the
``simulate_aegis.py`` module.  Given a CSV of interaction records, it
computes summary statistics — such as median latency and attack success
rates per scenario — and produces visualisations to aid interpretation.

Usage:

    python analysis.py --input results.csv --output-dir ./plots

If no ``--output-dir`` is provided, the script will create a directory
named ``plots`` in the current working directory.  The generated
figures and summary CSV will be placed there.

The script depends on pandas and matplotlib; these packages are included
in the environment used by this project.  If running outside of this
environment, ensure they are installed (e.g. via ``pip install pandas
matplotlib``).
"""

from __future__ import annotations

import argparse
import os
import sys
from pathlib import Path
from typing import Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Analyse Aegis simulation results")
    parser.add_argument(
        "--input",
        type=str,
        default="aegis_simulation_results.csv",
        help="CSV file generated by simulate_aegis.py",
    )
    parser.add_argument(
        "--output-dir",
        type=str,
        default="plots",
        help="Directory to store plots and summary outputs",
    )
    return parser.parse_args()


def compute_statistics(df: pd.DataFrame) -> pd.DataFrame:
    """Compute median latency and attack success rate for each scenario.

    Args:
        df: DataFrame containing columns 'scenario', 'latency', and 'attack_success'.

    Returns:
        A DataFrame indexed by scenario with columns 'median_latency',
        'mean_latency', and 'attack_success_rate' (as a percentage).
    """
    stats = df.groupby("scenario").agg(
        median_latency=("latency", "median"),
        mean_latency=("latency", "mean"),
        attack_success_rate=("attack_success", "mean"),
    )
    # Convert attack success rate from proportion to percentage for readability
    stats["attack_success_rate"] = stats["attack_success_rate"] * 100.0
    return stats


def plot_latency_boxplot(df: pd.DataFrame, output_path: Path) -> None:
    """Create a box plot comparing latencies across scenarios."""
    # Prepare data: sort scenarios to group baseline and aegis cases together
    scenarios = sorted(df["scenario"].unique())
    data = [df.loc[df["scenario"] == s, "latency"] for s in scenarios]
    plt.figure(figsize=(10, 6))
    plt.boxplot(data, labels=scenarios, showmeans=True)
    plt.title("Distribution of simulated proof generation latencies per scenario")
    plt.xlabel("Scenario")
    plt.ylabel("Latency (seconds)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()


def plot_attack_success_rates(stats: pd.DataFrame, output_path: Path) -> None:
    """Create a bar chart showing attack success rates per scenario."""
    scenarios = stats.index.tolist()
    success_rates = stats["attack_success_rate"].tolist()
    plt.figure(figsize=(10, 5))
    bars = plt.bar(scenarios, success_rates, color="skyblue")
    plt.title("Attack success rate per scenario")
    plt.xlabel("Scenario")
    plt.ylabel("Success rate (%)")
    plt.ylim(0, max(success_rates) * 1.2 + 1)
    # Annotate bars with exact values
    for bar, rate in zip(bars, success_rates):
        height = bar.get_height()
        plt.annotate(f"{rate:.1f}%", xy=(bar.get_x() + bar.get_width() / 2, height),
                     xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()


def main() -> None:
    args = parse_args()
    input_file = Path(args.input)
    output_dir = Path(args.output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    if not input_file.exists():
        print(f"Error: input file '{input_file}' does not exist.", file=sys.stderr)
        sys.exit(1)
    # Read CSV; ensure correct dtypes
    df = pd.read_csv(input_file)
    # Convert latency to float and attack_success to int (if necessary)
    df["latency"] = df["latency"].astype(float)
    df["attack_success"] = df["attack_success"].astype(int)
    # Compute stats
    stats_df = compute_statistics(df)
    # Save summary to CSV
    summary_path = output_dir / "summary_statistics.csv"
    stats_df.to_csv(summary_path)
    print("Summary statistics:")
    print(stats_df.to_string(float_format=lambda x: f"{x:,.4f}") )
    print(f"Summary statistics saved to {summary_path}")
    # Plot latency box plot
    latency_plot_path = output_dir / "latency_boxplot.png"
    plot_latency_boxplot(df, latency_plot_path)
    print(f"Latency box plot saved to {latency_plot_path}")
    # Plot attack success rates
    success_plot_path = output_dir / "attack_success_rates.png"
    plot_attack_success_rates(stats_df, success_plot_path)
    print(f"Attack success rate bar chart saved to {success_plot_path}")


if __name__ == "__main__":
    main()